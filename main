"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"

export default function Calculator() {
  const [display, setDisplay] = useState("0")
  const [previousValue, setPreviousValue] = useState<number | null>(null)
  const [operation, setOperation] = useState<string | null>(null)
  const [waitingForOperand, setWaitingForOperand] = useState(false)

  const inputNumber = (num: string) => {
    if (waitingForOperand) {
      setDisplay(String(num))
      setWaitingForOperand(false)
    } else {
      setDisplay(display === "0" ? String(num) : display + num)
    }
  }

  const inputDecimal = () => {
    if (waitingForOperand) {
      setDisplay("0.")
      setWaitingForOperand(false)
    } else if (display.indexOf(".") === -1) {
      setDisplay(display + ".")
    }
  }

  const clear = () => {
    setDisplay("0")
    setPreviousValue(null)
    setOperation(null)
    setWaitingForOperand(false)
  }

  const performOperation = (nextOperation: string) => {
    const inputValue = Number.parseFloat(display)

    if (previousValue === null) {
      setPreviousValue(inputValue)
    } else if (operation) {
      const currentValue = previousValue || 0
      const newValue = calculate(currentValue, inputValue, operation)

      setDisplay(String(newValue))
      setPreviousValue(newValue)
    }

    setWaitingForOperand(true)
    setOperation(nextOperation)
  }

  const calculate = (firstValue: number, secondValue: number, operation: string): number => {
    switch (operation) {
      case "+":
        return firstValue + secondValue
      case "-":
        return firstValue - secondValue
      case "×":
        return firstValue * secondValue
      case "÷":
        return firstValue / secondValue
      case "=":
        return secondValue
      default:
        return secondValue
    }
  }

  const handleEquals = () => {
    const inputValue = Number.parseFloat(display)

    if (previousValue !== null && operation) {
      const newValue = calculate(previousValue, inputValue, operation)
      setDisplay(String(newValue))
      setPreviousValue(null)
      setOperation(null)
      setWaitingForOperand(true)
    }
  }

  const handlePercentage = () => {
    const value = Number.parseFloat(display)
    setDisplay(String(value / 100))
  }

  const handlePlusMinus = () => {
    const value = Number.parseFloat(display)
    setDisplay(String(value * -1))
  }

  const buttonClass = "h-16 text-lg font-semibold transition-all duration-200 hover:scale-105"
  const numberButtonClass = `${buttonClass} bg-gray-100 hover:bg-gray-200 text-gray-900`
  const operatorButtonClass = `${buttonClass} bg-orange-500 hover:bg-orange-600 text-white`
  const functionButtonClass = `${buttonClass} bg-gray-300 hover:bg-gray-400 text-gray-900`

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-sm shadow-2xl">
        <CardContent className="p-6">
          <div className="mb-6">
            <div className="bg-black text-white p-4 rounded-lg text-right">
              <div className="text-3xl font-mono overflow-hidden">{display}</div>
            </div>
          </div>

          <div className="grid grid-cols-4 gap-3">
            {/* First Row */}
            <Button onClick={clear} className={functionButtonClass}>
              AC
            </Button>
            <Button onClick={handlePlusMinus} className={functionButtonClass}>
              +/-
            </Button>
            <Button onClick={handlePercentage} className={functionButtonClass}>
              %
            </Button>
            <Button onClick={() => performOperation("÷")} className={operatorButtonClass}>
              ÷
            </Button>

            {/* Second Row */}
            <Button onClick={() => inputNumber("7")} className={numberButtonClass}>
              7
            </Button>
            <Button onClick={() => inputNumber("8")} className={numberButtonClass}>
              8
            </Button>
            <Button onClick={() => inputNumber("9")} className={numberButtonClass}>
              9
            </Button>
            <Button onClick={() => performOperation("×")} className={operatorButtonClass}>
              ×
            </Button>

            {/* Third Row */}
            <Button onClick={() => inputNumber("4")} className={numberButtonClass}>
              4
            </Button>
            <Button onClick={() => inputNumber("5")} className={numberButtonClass}>
              5
            </Button>
            <Button onClick={() => inputNumber("6")} className={numberButtonClass}>
              6
            </Button>
            <Button onClick={() => performOperation("-")} className={operatorButtonClass}>
              -
            </Button>

            {/* Fourth Row */}
            <Button onClick={() => inputNumber("1")} className={numberButtonClass}>
              1
            </Button>
            <Button onClick={() => inputNumber("2")} className={numberButtonClass}>
              2
            </Button>
            <Button onClick={() => inputNumber("3")} className={numberButtonClass}>
              3
            </Button>
            <Button onClick={() => performOperation("+")} className={operatorButtonClass}>
              +
            </Button>

            {/* Fifth Row */}
            <Button onClick={() => inputNumber("0")} className={`${numberButtonClass} col-span-2`}>
              0
            </Button>
            <Button onClick={inputDecimal} className={numberButtonClass}>
              .
            </Button>
            <Button onClick={handleEquals} className={operatorButtonClass}>
              =
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
